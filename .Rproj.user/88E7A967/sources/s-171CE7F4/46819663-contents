---
title: "Day 1: Introduction to RStudio & the Tidyverse"
author: "Kathleen Hablutzel"
date: "6/11/2020"
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(
  message = FALSE,
  echo = TRUE)
library(tidyverse)
```

## Welcome!!!

#### Getting Started

If you haven't already, start downloading R and R Studio. See the instructions [here](index.html) under "Getting Started."

After today's lesson, I'll post my code here. You can also follow along below.

#### Creating an RMarkdown Document

* Write text and embed code chunks
* R is the *language* (in the console and in code chunks)
* RStudio is the *programming environment*
* RMarkdown is a *markup language* for combining text with code
    + Produce reproducible reports where the code is right there
    + Export to HTML, PDF, MS Word (how I created website)
    
```{r}
summary(cars)
```

See the RMarkdown [reference guide](https://rstudio.com/wp-content/uploads/2015/03/rmarkdown-reference.pdf).

## Data Visualizations with ggplot2

Today we will:

* Make a plot
* Add basic plot elements
* Look ahead at what's next

#### Introducing... the Tidyverse

Plotting with base R is… not super fun. 

```{r}
plot(pressure)
```

Instead, we plot with `ggplot2`, a popular open-source package. `ggplot2` is an implementation of Wilkinson's *Grammar of Graphics*, which means that you combine plot building blocks to create your visualization.

`ggplot2` is part of the Tidyverse, a series of open-source R packages that “share an underlying design philosophy, grammar, and data structures”. (See the [website](https://www.tidyverse.org/) and [GitHub repository](https://github.com/tidyverse/tidyverse).)

The main packages are `ggplot2`, `dplyr`, `tidyr`, `readr`, `purrr`, `tibble`, `stringr`, and `forcats`, but we will mostly focus on **ggplot2** (for data visualization) and **dplyr** (for data wrangling).

Let's load the tidyverse:

```{r}
library(tidyverse)
```

In the bottom right panel, under the Packages tab, the `tidyverse` packages should now be checked. In each file, you need to load packages before you use them.

#### Your First Plot

We are going to work with the `mtcars` data set. Let's take a look:

```{r}
glimpse(mtcars)
# View(mtcars)
```


#### Example 1: A Scatterplot

```{r Scatterplot}
# a basic scatterplot
ggplot(data = mtcars, aes(x = wt, y = mpg)) +
  geom_point()
```

Note: You map variables to aesthetics within `aes()` and set fixed visual cues outside `aes()`. If I want all my points to be blue, I use the color parameter outside `aes()`:

```{r}
# adding color
ggplot(data = mtcars, aes(x = wt, y = mpg)) +
  geom_point(color = "blue")
```

If I want to map color to a variable, I use the color parameter inside `aes()`:

```{r}
# mapping a variable to color
ggplot(data = mtcars, aes(x = wt, y = mpg)) +
  geom_point(aes(color = cyl))
```

#### Example 2: A Box Plot

If we look at the data again, we notice that it's all numbers:

```{r}
glimpse(mtcars)
```

However, the number of cylinders in the car is always 4, 6, or 8. Let's use the `factor()` function to turn this into categorical data, so that we can make a boxplot.

```{r Bar_Chart}
# a basic boxplot
ggplot(data = mtcars, aes(x = factor(cyl), y = mpg)) +
  geom_boxplot()
```

#### About Available Data Sets

The `data()` function will show you all your available data sets:

```{r}
data()
```

The `iris` data set is a famous data set used in machine learning classes. Let's take a look at the documentation:

```{r}
?iris
```

Now, look at the sources. This data comes from the work of a famous eugenicist, statistician, and geneticist, R.A. Fisher, and was published in a journal on eugenics. Many statisticians are currently pushing to use alternate data sets in their classrooms and [remove Fisher's name](https://www.change.org/p/american-statistical-association-rename-the-fisher-lecture-after-david-blackwell) from the prestigious [Fisher Lectureship](https://en.wikipedia.org/wiki/R._A._Fisher_Lectureship).

Data is more than numbers.




## Where are we going?

* Adding Color and Themes
    + Make those plots look awesome
* Data Wrangling
    + Find cool patterns
    + Sort your data
    
For example:

```{r June_Weather}
library(ggthemes)

june_weather <- airquality %>%
  filter(Month == 6) %>% # only June weather
  select(Day, Temp) # only columns we need

june_plot <- ggplot(data = june_weather, aes(x = Day, y =  Temp)) +
  geom_point() + # make our points purple
  geom_line() + # add a line
  labs(title = "Temperatures in NY, June 1973",
       x = "Day",
       y = "Temperature (°F)") +
  theme_wsj() +
  theme(plot.title = element_text(size = 18))

june_plot
```

#### Can I practice more?

Yes! So glad you asked. An awesome way to learn data visualization is through "copy the master" experiments, where you try to recreate an existing graph as closely as possible.

You'll need to dig into the `ggplot2` documentation, as well as the `storms` dataset. I recommend starting by looking at `labs()` and `theme()`, though we'll cover themes more next week.

Graph to copy:

```{r}
storm_plot <- ggplot(data = storms, aes(x = wind, y = pressure)) +
  geom_point(aes(color = status)) +
  labs(
    title = "Pressure vs. Wind Speed of Atlantic Storms",
    caption = "Source: NOAA",
    x = "Maximum Sustained Wind Speed (knots)",
    y = "Air Pressure at Storm Center (millibars)",
    color = "Status"
  ) +
  scale_color_manual(
    labels = c("Hurricane",  "Tropical Depression", "Tropical Storm"),
    values = c("#6f18ad", "#f051bb", "#faf600")
  ) +
  theme(
    text = element_text(family = "Arial"),
    rect = element_blank(),
    axis.line = element_line(color = "gray40"),
    panel.grid = element_line(color = "gray90"),
    legend.position = "bottom"
  )

storm_plot
```


I'll reveal the code next week!